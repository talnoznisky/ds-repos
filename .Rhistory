intraining <- createDataPartition(training$classe, p=0.7, list=FALSE)
train <- training[intraining,]
test <- training[-intraining,]
?nearZeroVar
nzv <- nearZeroVar(train)
train <- train[,-nzv]
test <- test[,-nzv]
na <- sapply(train, function(x) mean(is.na(x))) > 0.9
train <- train[,na==FALSE]
train <- train[,-(1:5)]
test <- test[,na==FALSE]
test <- test[,-(1:5)]
?train
set.seed(101)
modelFit <- train(classe ~ ., data = train, method="rf", ntree=10)
?trainControl
fitControl<- trainControl(method = "repeatedcv", number=10, repeats=10)
?train
modelFitTrainControl <- train(classe ~ ., data = train, method="rf", trControl=fitControl)
fitControl<- trainControl(method = "repeatedcv", number=5, repeats=5)
modelFitTrainControl <- train(classe ~ ., data = train, method="rf", trControl=fitControl)
prediction <- predict(modelFit,newdata=test)
confusion <- confusionMatrix(prediction, test$classe)
confusion
confusion$overall$Accuracy
confusion$overall
confusion$overall[1]
mean((prediction-test$classe)^2)
mean((factor(prediction)-factor(test$classe))^2)
confusion
confusion$table
modelFit
set.seed(101)
modelFit2 <- train(classe ~ ., data = train, method="rf")
#accuracy
confusion$overall[1]
1-sum(diag(confusion$table))/sum(confusion$table)
(confusion$overall[1])+(1-sum(diag(confusion$table))/sum(confusion$table))
1-(confusion$overall[1])
(1-(confusion$overall[1]))*100
predict(modelFit, testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
set.seed(233)
model <- train(CompressiveStrength ~ ., training, method = "lasso")
model$finalModel
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
install.packages("elasticnet")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(model$finalModel, xvar = "penalty", use.color = TRUE)
df <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat <- df
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecaseat")
install.packages("forecast")
?bats
library(forecast)
?bats
tstest = ts(testing$visitsTumblr)
model = bats(tstrain)
fc = forecast(model, level=90)
fc
fc = forecast(model, level=95)
fc
nrow(fc)
length(fc)
length(fc)/length(model)
?forecase
?forecast
sum(fc$lower < tstest & fc$upper > tstest)/length(tstest)
sum(fc$lower < tstest & fc$upper > tstest)/length(training)
tstest = testing$visitsTumblr
sum(fc$lower < tstest & fc$upper > tstest)/length(training)
sum(fc$lower < tstest & fc$upper > tstest)/length(tstest)
dim(tstest)
tstest
dim(tstest)[1]
dim(training)[1]
sum(fc$lower < training$visitsTumblr & fc$upper > training$visitsTumblr)/length(training$visitsTumblr)
git
update.packages("RSiteCatalyst")
install.packages("xml2")
rm(list = ls())
library(xml2)
entries <- xml_find_all(pg, "//entry")
pg <- read_xml("http://publish-proxy.int2.tmo-razorfish.com/bin/services/marketing/assets.xml")
entries <- xml_find_all(pg, "//entry")
View(pg)
View(entries)
xml_text(entries)
trimws
vals <- trimws(xml_text(entries))
View(vals)
labs <- trimws(xml_attr(entries, "label"))
View(labs)
entries <- xml_find_all(pg, "///entry")
vals <- trimws(xml_text(entries))
labs <- trimws(xml_attr(entries, "label"))
entries <- xml_find_all(pg, "////entry")
entries <- xml_find_all(pg, "/thumbnail")
entries <- xml_find_all(pg, "//entry")
install.packages("leaflet")
library(leaflet)
m = leaflet()
View(m)
m = addTiles(m)
m
m = addMarkers(m, lng=-123.256168, lat=49.266063, popup="T")
m
getwd()
setwd(paste0(getwd(),"/desktop/data_products/map"))
m = addTiles(leaflet(m))
m
seattle.lat <- 47.6062
seattle.long <- 122.3321
seattle.lat <- 47.6062
seattle.long <- 122.3321
m = addTiles(leaflet(m))
m = addMarkers(m, lng = seattle.long, lat = seattle.long)
m
seattle.long <- 47.6062
seattle.lat <- 122.3321
m = addTiles(leaflet(m))
m = addMarkers(m, lng = seattle.long, lat = seattle.long)
m
seattle.long <- -122.349358
seattle.lat <- 47.620422
m = addTiles(leaflet(m))
m = addMarkers(m, lng = seattle.long, lat = seattle.long)
m
m = addMarkers(m, lng = seattle.long, lat = seattle.lat)
m
seattle.long <- -122.349358
seattle.lat <- 47.620422
m = addTiles(leaflet(m))
m = addMarkers(m, lng = seattle.long, lat = seattle.lat)
m
m
maps
library(maps)
install.packages("maps")
library(maps)
mapStates = map("state")
mapStates = map("state", fill=true)
mapStates = map("state", fill=TRUE)
mapStates = map("state", fill=TRUE, plot = FALSE)
mapStates
leaflet(data = mapStates)
m = addTiles(leaflet(data = mapStates))
m
m = addPolygons(addTiles(leaflet(data = mapStates)))
m
m = addPolygons(addTiles(leaflet(data = mapStates)),stroke = FALSE)
m
forestation <- read.csv(state_forestation.csv)
forestation <- read.csv(state_forestation.csv)
forestation <- read.csv("state_forestation.csv")
View(forestation)
mapStates
forestation$state <- tolower(forestation$state)
map_data("states")
map_data("state")
library(maps)
View(mapStates)
mapStates$names
df$names <- mapStates$names
mapStates$names
df$names <- data.frame(mapStates$names)
df <- data.frame(mapStates$names)
df
df$forest <- lappy(forestation$forestation[grep()])
?grep
df$forest <- lapply(forestation$forestation[grep(forestation$state,df$mapStates.names)])
df$split <-strplit(df$mapStates.names, "")
df$split <-strsplit(df$mapStates.names, "")
df$split <-strsplit(df$mapStates.names, ":")
df$states <- gsub(":.*", "")
df$states <- gsub(":.*", "", df$mapStates.names)
View(df)
names(forestation$state) <- states
names(forestation$state) <- "states"
View(forestation)
names(forestation$state) <- c("states")
View(forestation)
colnames(forestation[1]) <- c("states")
colnames(forestation[1]) <- "states"
View(forestation)
colnames(forestation)[1] <- "states"
merge(df, forestation, by="states")
rm(list=ls())
library(maps)
mapStates = map("state", fill=TRUE, plot = FALSE)
forestation <- read.csv(state_forestation.csv)
forestation <- read.csv("state_forestation.csv")
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$mapStates.names)
df$state <- gsub(":.*", "", df$locations)
merge(df, forestation, by="states")
merge(df, forestation, by="state")
merge(df, forestation, by="state")
View(forestation)
View(df)
df <- merge(df, forestation, by="state")
forestation$state <- tolower(forestation$state)
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
pal <- colorNumeric(palette= "Greens", domain = df$forestation)
pal
m = addTiles(leaflet(m))
m = addTiles(leaflet(m))
m = addTiles(leaflet(data = mapStates))
m = addTiles(leaflet(data = mapStates))
m
mapStates = map("state", fill=TRUE, plot = TRUE)
m
m = addTiles(leaflet(data = mapStates))
m
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(forestation))
colnames(forestation$forestation) = "forests_pct"
colnames(forestation)[2] = "forests_pct"
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(forests_pct))
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
m = addTiles(leaflet(data = mapStates))
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(forests_pct))
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(forests_pct))
m = addTiles(leaflet(data = mapStates))
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
?map
library(maps)
mapStates = map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation <- read.csv("state_forestation.csv")
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
##colors
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
##initialize map
m = addTiles(leaflet(data = mapStates))
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
---
title: "Leaflet Project 1"
author: "Tal Noznisky"
date: "5/19/2018"
output: html_document
---
```{r map, echo=FALSE}
##create data table
library(maps)
mapStates = map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
##colors
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
##initialize map
m = addTiles(leaflet(data = mapStates))
m %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
```
?colorNumeric
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
mapStates = map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
df <- df[-2,]
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
rm(list=ls())
library(leaflet)
library(maps)
mapStates = map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
rm(list=ls())
library(leaflet)
library(maps)
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
rm(list=ls())
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
View(df)
df <- df[-1,]
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
df <- df[,-1]
nrow(mapStates$names)
mapStates$names
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state")
df <- df[,-1]
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
pal(df$forests_pct)
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = pal(df$forests_pct))
>merge
?merge
rm(list=ls())
library(leaflet)
library(maps)
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state", all=TRUE)
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state", all.x=ALL)
df <- merge(df, forestation, by="state", all.x=all)
df <- merge(df, forestation, by="state", all.x=TRUE)
df <- df[,-1]
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = pal(df$forests_pct))
m
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, smoothFactor = 0.2, fillOpacity = 1,
color = pal(df$forests_pct))
```
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, smoothFactor = 0.2, fillOpacity = 1,
color = pal(df$forests_pct))
m
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, weight = 1, opacity = 1, color = black, smoothFactor = 0.2, fillOpacity = 1,
fillcolor = pal(df$forests_pct))
```
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, weight = 1, opacity = 1, color = black, smoothFactor = 0.2, fillOpacity = 1,
fillcolor = pal(df$forests_pct))
addPolygons(stroke = TRUE, weight = 1, opacity = 1, color = black, smoothFactor = 0.2, fillOpacity = 1,
fillColor = pal(df$forests_pct))
addPolygons(stroke = TRUE, weight = 1, opacity = 1, color = "black", smoothFactor = 0.2, fillOpacity = 1,
fillColor = pal(df$forests_pct))
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, weight = 1, opacity = 1, color = "black", smoothFactor = 0.2, fillOpacity = 1,
fillColor = pal(df$forests_pct))
m
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, weight = .5, opacity = .5, color = "black", smoothFactor = 0.2, fillOpacity = 1,
fillColor = pal(df$forests_pct))
m
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = TRUE, weight = .2, opacity = .5, color = "black", smoothFactor = 0.2, fillOpacity = 1,
fillColor = pal(df$forests_pct))
m
```{r map, echo=FALSE}
library(dplyr)
library(leaflet)
library(maps)
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state", all.x=TRUE)
df <- df[,-1]
##colors
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
```{r map, echo=FALSE}
library(dplyr)
library(leaflet)
library(maps)
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state", all.x=TRUE)
df <- df[,-1]
##colors
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
##initialize map
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
library(dplyr)
library(leaflet)
library(maps)
mapStates <- map("state", fill=TRUE, plot = TRUE, boundary = TRUE)
forestation <- read.csv("state_forestation.csv")
forestation$state <- tolower(forestation$state)
colnames(forestation)[2] = "forests_pct"
df <- data.frame(mapStates$names)
colnames(df)[1] <- "locations"
df$state <- gsub(":.*", "", df$locations)
df <- merge(df, forestation, by="state", all.x=TRUE)
df <- df[,-1]
##colors
pal <- colorNumeric(palette= "Greens", domain = df$forests_pct)
##initialize map
m <- leaflet(data = mapStates) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(df$forests_pct))
m
legend.gradient(pnts, cols = heat.colors(100), limits = c(0, 1),
title = "Legend", ...)
